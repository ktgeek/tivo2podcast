This is my package of two scripts I wrote up to work with my TiVo
Series 3 to my linux box in terms of downloading content.

TiVo2Disk
---------
TiVo2Disk is a simple downloading application.  It downloads the shows
requested, and pipes them through tivodecode so you end with a useful
mpg file.  By default it will not give you the choice to download copy
protected content.

TiVo2Disk requires:
 o rubygems
 o httpclient gem
 o facets gem
 o tivodecode from http://tivodecode.sourceforge.net/

It is expected that you have your ~/.tivodecode_mak setup as both the
script and tivodecode will will use it.

This was tested on both OS X and Linux.

TiVo2Podcast
------------

TiVo2Podcast was my attempt to pipeline downloading shows, transcoding
them to be iPhone friendly, and then put them into an podcast friendly
RSS feed for easy loading and unloading into iTunes/iPhone/etc.

TiVo2Podcast requires:
 o rubygems
 o httpclient gem
 o facets gem
 o tivodecode
 o sqlite3 and its ruby interface
 o AtomicParsley from http://atomicparsley.sourceforge.net/
 o HandBrakeCLI from http://handbrake.fr/

It is expected that you have your ~/.tivodecode_mak setup as both the
script and tivodecode will will use it.

You will also need to edit the IP address of your TiVo in TiVo2Podcast
at line 33.  This will be fixed in a future version.

You'll need to run TiVo2Podcast once to create the sqlite database
that TiVo2Podcast uses to store its data.  This database is at
~/.tivo2podcast.db, but you can move it by defining the environmental
variable TIVO2PODCASTDIR putting the file in
$TIVO2PODCASTDIR/.tivo2podcast.db

After the database is created, you can use the sqlite commandline tool
to open the database and edit the 'configs' table to set up a show.

The config table has the following fields:
config_name TEXT NOT NULL UNIQUE - Config name for use with the -c flag
show_name TEXT NOT NULL - Show name/regex to match in the Tivo
rss_filename TEXT NOT NULL - The name of the resultant xml file
rss_link TEXT NOT NULL - The URL of the "source material" whatever you want
rss_baseurl TEXT NOT NULL - The base URL where the rss file and podcasts
                            files live
rss_ownername TEXT NOT NULL - Owner of the RSS feed
rss_owneremail TEXT NOT NULL - E-mail of the owner of the rss feed
ep_to_keep INTEGER NOT NULL DEFAULT 5 - The number of shows to keep in the feed
encode_crop TEXT - How to crop the content (if needed) in HandBrake CLI format
encode_audio_bitrate INTEGER - The bitrate to use, defaults to 48
encode_video_bitrate INTEGER - The bitrate to use, defaults to 768
encode_decomb INTEGER - Whether to decomb (deinterlace) the source
                        material, 1 or 0 for true or false

An example of putting The Daily Show into the script would look like this:

insert into configs (config_name, show_name, rss_filename, rss_link,
                     rss_baseurl, rss_ownername, rss_owneremail, ep_to_keep,
                     encode_decome)
            values ('tds', 'The Daily Show', 'tds.xml',
                    'http://www.thedailyshow.com/',
                    'http://example.com/podcasts/', 'Keith T. Garner',
                    'kgarner@example.com', 4, 1);

You can then put the script into cron.  Without a -c flag it will run
for all configs found, if a -c is passed it will only run for that
config.  You may pass -c multiple times.

Currently the script will download and then transcode in a serial
progression.  A future enhancement would be to configure this to
multiple work queues.

This has been tested (and used daily) on Linux
