#!/usr/bin/env ruby

# This has -Z "iPhone" expanded so I could tweak a few things
# HandBrakeCLI -v 0 -e x264 -b 768 -2 -T -5 default --crop 5:0:0:0 -a 1 -E faac -B 48 -6 stereo -R 48 -D 0.0 -f mp4 -X 480 -x cabac=0:ref=2:me=umh:bframes=0:subme=6:8x8dct=0:trellis=0 -i input.mpg -o output.mpg

# You must have tivodecode for this to work.
# Your tivo mak will be read out of ~/.tivodecode_mak if it is available

# Adds the lib path next to the path the script is in to the head of
# the search patch
$:.unshift File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib',
                                      'httpclient-2.1.2', 'lib'))
$:.unshift File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'optparse'
require 'TiVo.rb'
require 'facets/progressbar.rb'
require 'sqlite3'
require 'rss'
require 'rss/itunes'
require 'uri'

HANDBRAKE = 'HandBrakeCLI'
ATOMICPARSLEY = 'AtomicParsley'
# This should be made generic into a configuration
TIVO_ADDR = '192.168.69.179'

def init_database(fdb)
  fdb.execute('create table configs (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 config_name TEXT NOT NULL,
                 show_name TEXT NOT NULL,
                 rss_filename TEXT NOT NULL,
                 rss_link TEXT NOT NULL,
                 rss_baseurl TEXT NOT NULL,
                 rss_ownername TEXT NOT NULL,
                 rss_owneremail TEXT NOT NULL,
                 ep_to_keep INTEGER NOT NULL DEFAULT 5
               );')
  fdb.execute('create table shows (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 configid TEXT NOT NULL,
                 s_name TEXT,
                 s_ep_title TEXT,
                 s_ep_number TEXT,
                 s_ep_description TEXT,
                 s_ep_length INTEGER,
                 s_ep_timecap INTEGER,
                 filename TEXT UNIQUE,
                 FOREIGN KEY(configid) REFERENCES configs(id)
                );')
end

def load_configs(db, names)
  result = Array.new
  if names.empty?
    db.query("select * from configs") { |rs| rs.each { |r| result << r } }
  else
    names.each do |n|
      db.query("select * from configs where config_name = ?", n) do |rs|
        rs.each { |r| result << r }
      end
    end
  end
  return result
end

def download_show(show, name)
  tivo = TiVo::TiVo.new(TIVO_ADDR, MAK)

  # downlaod the file
  IO.popen("tivodecode -o \"#{name}\" -", 'wb') do |td|
    pbar = Console::ProgressBar.new(name, show.size)
    tivo.download_show(show) do |tc|
      td << tc
      pbar.inc(tc.length)
    end
    pbar.finish
    puts
  end
end

def transcode_show(infile, outfile)
  command = %w/-v 0 -e x264 -b 768 -2 -T -5 default --crop 5:0:0:0 -a 1 -E faac -B 48 -6 stereo -R 48 -D 0.0 -f mp4 -X 480 -x cabac=0:ref=2:me=umh:bframes=0:subme=6:8x8dct=0:trellis=0 -i/ << infile << '-o' << outfile
  returncode = system(HANDBRAKE, *command)

  if !returncode
    puts "something isn't working right, bailing"
    exit(1)
  end
end

def get_database
  # Open up the database we use for config and status
  tivodb = (ENV['TIVO2PODCASTDIR'].nil? ? ENV['HOME'] :
            ENV['TIVO2PODCASTDIR']) + File::SEPARATOR + '.tivo2podcast.db'
  db_needs_init = !File.exist?(tivodb)
  db = SQLite3::Database.new(tivodb)
  db.results_as_hash = true
  init_database(db) if db_needs_init
  return db
end

def generate_rss(config, db)
  # Here is where I would generate RSS and also clean up older files
  rss = RSS::Maker.make("2.0") do |maker|
    maker.channel.title = config['show_name']
    maker.channel.description = "My " + config['show_name'] + "how RSS feed"
    # Should I add this to the config?
    maker.channel.link = config['rss_link']
    maker.channel.lastBuildDate = Time.now

    maker.channel.itunes_author = maker.channel.title
    maker.channel.itunes_owner.itunes_name=config['rss_ownername']
    maker.channel.itunes_owner.itunes_email=config['rss_owneremail']
    
    maker.items.do_sort = true

    db.query("select * from shows where configid=?", config['id']) do |rows|
      rows.each do |row|
        maker.items.new_item do |item|
          item.title = row['s_ep_title']
          item.link = URI.escape(config['rss_baseurl'] + row['filename'])

          item.guid.content = item.link
          item.guid.isPermaLink = true
          item.pubDate = Time.parse(row['s_ep_timecap'])
          item.description = row['s_ep_description']
          item.itunes_summary = row['s_ep_description']
          item.itunes_explicit = "No"

          # I need to come back and do the time.  For now, I'm hard coding
          # to 32 minutes
          # time = row['s_ep_length']
          item.itunes_duration = '32:00'

          item.enclosure.url = item.link
          item.enclosure.length = File.size(row['filename'])
          item.enclosure.type = 'video/x-m4v'
        end
      end
    end
  end

  File.open(config['rss_filename'], 'w') { |f| f << rss.to_s }
end

#   --title            ,  -s   (str)    Set the title tag: "moov.udta.meta.ilst.Â©nam.data"
#   --TVNetwork        ,  -n   (str)    Sets the TV Network name on the "tvnn" atom
#   --TVShowName       ,  -H   (str)    Sets the TV Show name on the "tvsh" atom
#   --TVEpisode        ,  -I   (str)    Sets the TV Episode on "tven":"209", but its a string: "209 Part 1"
#   --TVSeasonNum      ,  -U   (num)    Sets the TV Season number on the "tvsn" atom
#   --TVEpisodeNum     ,  -N   (num)    Sets the TV Episode number on the "tves" atom
#   --description      ,  -p   (str)    Sets the description on the "desc" atom
def add_metadata_to_video(filename, show, ep_title_or=nil, description_or=nil)

  episode_title = (ep_title_or.nil? ? show.episode_title : ep_title_or)
  showtitle = show.title + ': ' + episode_title
  showtitle = showtitle + ' (' + show.episode_number + ')' unless show.episode_number.nil?
  
  command = Array.new << filename << '-W' << '--title' << showtitle <<
    '--TVShowName' << show.title << '--TVEpisode' << episode_title
  command << '--TVEpisodeNum' << show.episode_number unless show.episode_number.nil?
  command << '--TVNetwork' << show.station unless show.station.nil?

  description = description_or.nil? ? show.description : description_or
  unless description.nil?
    command << '--description' << description
  end
  
  returncode = system(ATOMICPARSLEY, *command)
  if !returncode
    puts "something isn't working right, bailing"
    exit(1)
  end
end

def add_show_to_db(db, config, show, filename, ep_title_or=nil,
                   description_or=nil)
  episode_title = ep_title_or.nil? ? show.episode_title : ep_title_or
  description = description_or.nil? ? show.description : description_or
  ps = db.prepare('insert into shows(configid, s_name, s_ep_title, s_ep_number, s_ep_description, s_ep_length, s_ep_timecap, filename) values (?, ?, ?, ?, ?, ?, ?, ?);')
  ps.execute(config['id'], show.title, episode_title, show.episode_number,
             description, show.duration, show.time_captured, filename)
  ps.close
end
      
def get_shows(showname)
  tivo = TiVo::TiVo.new(TIVO_ADDR, MAK)
  tivo.get_listings.videos.select { |s| s.title =~ /#{showname}/ && !s.copy_protected? }.sort_by { |s| s.time_captured }
end

  # Load the mak if we have a mak file
mak_file = ENV['HOME'] + '/.tivodecode_mak'
MAK = File.read(mak_file).strip if File.exist?(mak_file)

opt_config_names = Array.new
opts = OptionParser.new
opts.on('-c CONFIG', '--config CONFIG',
        'Use the named config on this run') { |c| configs << c }
opts.on('-m MAK', '--mak MAK', 'The TiVo\'s media access key') { |k| mak = k }
opts.on_tail('-h', '--help', 'Show this message') do
  puts opts
  exit
end
opts.parse(ARGV)

db = get_database()
  

configs = load_configs(db, opt_config_names)

configs.each do |config|

  shows = get_shows(config['show_name'])


  # So starts the giant loop that processes the shows...
  shows.each do |s|
    # Beef this up to capture the show title as well
    basename = s.title + '-' + s.time_captured.strftime("%Y%m%d")
    basename = basename + '-' + s.episode_title unless s.episode_title.nil?
    basename = basename + '-' + s.episode_number unless s.episode_number.nil?
    basename.sub!(/:/, '_')

    download = basename + ".mpg"
    transcode = basename + ".m4v"

    # I should add a check to see if the file exists or the transcoded
    # version of it, and if so, assume we already downloaded the file
    if (!(File.exist?(download) || File.exist?(transcode)))
      download_show(s, download)

      transcode_show(download, transcode)
      
      File.delete(download)

      episode_title = nil
      unless s.episode_title.nil?
        episode_title = s.episode_title
      else
        episode_title = s.time_captured.strftime("%m/%d/%Y")
      end

      description = s.description.sub('Copyright Tribune Media Services, Inc.', '') unless s.description.nil?

      add_metadata_to_video(transcode, s, episode_title, description)

      add_show_to_db(db, config, s, transcode, episode_title, description)

    else
      puts "Skipping #{basename} because it seems to exist"
    end
  end

  # cleanup phase goes here

  generate_rss(config, db)
end

db.close

# Local Variables:
# mode: ruby
# End:
