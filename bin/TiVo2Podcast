#!/usr/bin/env ruby
# Copyright 2011-2016 Keith T. Garner. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.


# Adds the lib path next to the path the script is in to the head of
# the search patch
$:.unshift File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib',
                                      'tivo'))

require 'optparse'
require 'tivopodcast/config'
require 'tivopodcast/database'

t2pconfig = Tivo2Podcast::AppConfig.instance

opts = OptionParser.new
opts.on('-c CONFIG', '--config CONFIG',
        'Use the named config on this run (may be used multiple times)') do |c|
  t2pconfig.opt_config_names << c
end
opts.on('-C', '--cleanup', 'Clean up database based on existing files') do
  t2pconfig.cleanup = true
end
opts.on('-R', '--regenerate_rss', 'Regenerate all the RSS files') do
  t2pconfig.regenerate_rss = true
end
opts.on('-m MAK', '--mak MAK',
        'The TiVo\'s media access key') { |k| t2pconfig.mak = k }
opts.on('-t ADDR', '--tivo_addr ADDR',
        'The hostname or IP address of the tivo to get the data from') do |t|
  t2pconfig.tivo_addr = t
end
opts.on('-n NAME', '--tivo_name NAME',
        'The name assigned to the tivo via the my.tivo service') do |n|
  t2pconfig.tivo_name = n
end
opts.on('--console', 'Go into a console mode') { t2pconfig.console = true }
opts.on('--list-configs',
        'List config names and their show titles and exit') { t2pconfig.list_configs = true }
opts.on('-v', '--verbose') { t2pconfig.verbose = true }
opts.on_tail('-h', '--help', 'Show this message') do
  puts opts
  exit
end
opts.parse(ARGV)

# Connect to the database
Tivo2Podcast::connect_database(Tivo2Podcast::AppConfig::DATABASE_FILENAME)

case
when t2pconfig.list_configs
  require 'tivopodcast/data_outputter'
  output = Tivo2Podcast::DataOutputter.new
  output.configs
when t2pconfig.cleanup
  require 'tivopodcast/file_cleaner'
  Tivo2Podcast::FileCleaner.file_cleanup
when t2pconfig.regenerate_rss
  require 'tivopodcast/rss_generator'
  Tivo2Podcast::RssGenerator.regenerate_rss_files
when t2pconfig.console
  require 'tivopodcast'
  require 'tivopodcast/console'
  require 'pp'
  include Tivo2Podcast
  IRB.start_session(binding)
else
  require 'tivopodcast/main_engine'
  engine = Tivo2Podcast::MainEngine.new
  engine.normal_processing
end

# Local Variables:
# mode: ruby
# End:
