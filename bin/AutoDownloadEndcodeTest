#!/usr/bin/env ruby

# This has -Z "iPhone" expanded so I could tweak a few things
# HandBrakeCLI -v 0 -e x264 -b 768 -2 -T -5 default --crop 5:0:0:0 -a 1 -E faac -B 48 -6 stereo -R 48 -D 0.0 -f mp4 -X 480 -x cabac=0:ref=2:me=umh:bframes=0:subme=6:8x8dct=0:trellis=0 -i input.mpg -o output.mpg

# You must have tivodecode for this to work.
# Your tivo mak will be read out of ~/.tivodecode_mak if it is available

# Adds the lib path next to the path the script is in to the head of
# the search patch
$:.unshift File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib',
                                      'httpclient-2.1.2', 'lib'))
$:.unshift File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'optparse'
require 'TiVo.rb'
require 'facets/progressbar.rb'
require 'pp'

HANDBRAKE = 'HandBrakeCLI'
ATOMICPARSLEY = 'AtomicParsley'

# Load the mak if we have a mak file
mak_file = ENV['HOME'] + '/.tivodecode_mak'
mak = nil
mak = File.read(mak_file).strip if File.exist?(mak_file)

tivo_addr = '192.168.69.179'

tivo = TiVo::TiVo.new(tivo_addr, mak)

shows = tivo.get_listings.videos.select { |s| s.title =~ /Batman/ }.sort_by { |s| s.time_captured }

shows.each do |s|
  # Beef this up to capture the show title as well
  basename = s.title + '-' + s.time_captured.strftime("%Y%m%d")
  basename = basename + '-' + s.episode_title unless s.episode_title.nil?
  basename = basename + '-' + s.episode_number unless s.episode_number.nil?
  basename.sub!(/:/, '_')

  download = basename + ".mpg"
  transcode = basename + ".m4v"
  # I should add a check to see if the file exists or the transcoded
  # version of it, and if so, assume we already downloaded the file

  puts download
  
  if (!(File.exist?(download) || File.exist?(transcode)))
    tivo = TiVo::TiVo.new(tivo_addr, mak)

    # downlaod the file
    IO.popen("tivodecode -o \"#{download}\" -", 'wb') do |td|
      pbar = Console::ProgressBar.new(download, s.size)
      tivo.download_show(s) do |tc|
        td << tc
        pbar.inc(tc.length)
      end
      pbar.finish
      puts
    end

    command = %w/-v 0 -e x264 -b 768 -2 -T -5 default --crop 5:0:0:0 -a 1 -E faac -B 48 -6 stereo -R 48 -D 0.0 -f mp4 -X 480 -x cabac=0:ref=2:me=umh:bframes=0:subme=6:8x8dct=0:trellis=0 -i/ << download << '-o' << transcode
    returncode = system(HANDBRAKE, *command)

    if !returncode
      puts "something isn't working right, bailing"
      exit(1)
    end

    File.delete(download)

#   --TVNetwork        ,  -n   (str)    Sets the TV Network name on the "tvnn" atom
#   --TVShowName       ,  -H   (str)    Sets the TV Show name on the "tvsh" atom
#   --TVEpisode        ,  -I   (str)    Sets the TV Episode on "tven":"209", but its a string: "209 Part 1"
#   --TVSeasonNum      ,  -U   (num)    Sets the TV Season number on the "tvsn" atom
#   --TVEpisodeNum     ,  -N   (num)    Sets the TV Episode number on the "tves" atom
#   --description      ,  -p   (str)    Sets the description on the "desc" atom
    command = Array.new(transcode) << '-W' << '--TVShowName' << s.title << '--TVEpisodeNum' << s.episode_number << '--TVEpisode' << s.episode_title << '--TVNetwork' << s.station << '--description' << s.description
    
    returncode = system(ATOMICPARSLEY, *command)
    if !returncode
      puts "something isn't working right, bailing"
      exit(1)
    end
    
  end
end

# Local Variables:
# mode: ruby
# End:
