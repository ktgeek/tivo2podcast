#!/usr/bin/env ruby
# Copyright 2010,2016 Keith T. Garner. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
# You must have tivodecode for this to work.
# Your tivo mak will be read out of ~/.tivodecode_mak if it is available

# Adds the lib path next to the path the script is in to the head of
# the search patch
$:.unshift File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib',
                                      'tivo'))

require 'optparse'
require 'TiVo'
require 'TiVo-utils.rb'
require 'tty-progressbar'
require 'tty-screen'
require 'tty-prompt'
require 'tty-spinner'
require 'pastel'

def make_filename(tivo_item)
  name = tivo_item.title
  ep = tivo_item.episode_title
  name = name + "-" + ep unless ep.nil?
  unless ep.nil? || tivo_item.episode_number.nil?
    name = name + "-" + tivo_item.episode_number
  end
  name.sub!(/:/, '_')
  name.sub!(/\//, '_')
  "#{name}.ts"
end

def video_menu(videos)
  menu_entries = videos.map do |video|
    [
      "%3d | %-43.43s | %13.13s | %5s\n" % [
        video.channel,
        video.printable_title,
        video.time_captured.strftime('%m/%d %I:%M%p'),
        video.human_duration
      ],
      video
    ]
  end
  prompt = TTY::Prompt.new
  prompt.multi_select("Choose files to download", per_page: 10, echo: false) do |menu|
    menu_entries.each { |e| menu.choice *e }
  end
end

def init_progress_bar(name, size)
  tunc_size = TTY::Screen.width / 3 - 'Downloading '.length
  display_name = name.gsub(/(.{#{tunc_size}}).+/, '\1...')

  pastel = Pastel.new
  TTY::ProgressBar.new("Downloading #{display_name} [:bar] :percent",
                       total: size,
                       complete: pastel.green("="),
                       incomplete: pastel.red("="))
end

def perform_download(tivo, download_item, download_target, progress_bar = nil)
  tivo.download_show(download_item) do |tivo_chunk|
    download_target << tivo_chunk
    progress_bar.advance(tivo_chunk.length) if progress_bar
  end
  progress_bar.finish
end

# Load the mak if we have a mak file, using the tivodecode filename for legacy rasons
mak_file = "#{ENV['HOME']}/.tivodecode_mak"
mak = File.read(mak_file).strip if File.exist?(mak_file)


# Parse the options to get the rest (or override the above)
tivo_name, tivo_addr, tivo_libre_jar = nil, nil, nil
decode = true
opts = OptionParser.new
opts.on('-m MAK', '--mak MAK', 'The TiVo\'s media access key') { |k| mak = k }
opts.on('-t IP', '--tivo IP', 'The IP address of your TiVo') do |ip|
  tivo_addr = ip
end
opts.on('-d', '--no-decode', 'Will not use tivodecode.') { |d| decode = false }
opts.on('-j JAR', '--jar JAR', 'Location of the TiVoLibre jar') { |j| tivo_libre_jar = j }
opts.on('-n NAME', '--tivo_name NAME',
        'The name assigned to the tivo via the my.tivo service') do |n|
  tivo_name = n
end
opts.on_tail('-h', '--help', 'Show this message') do
  puts opts
  exit
end
opts.parse(ARGV)

if tivo_addr.nil?
  tivo_addr = TiVo.locate_via_dnssd(tivo_name)
  $stderr.puts "No TiVo found!" if tivo_addr.nil?
end

if (tivo_addr.nil? && tivo_name.nil?) || mak.nil?
  puts "Must have TiVo IP address and MAK to function."
  exit(1)
end

if decode && tivo_libre_jar.nil?
  puts "Must have tivo libre jar to decode"
  exit(1)
end

tivo = TiVo::TiVo.new(tivo_addr, mak)

listings = nil
spinner = TTY::Spinner.new('Retrieving TiVo videos :spinner')
spinner.run('Done!') { listings = tivo.get_listings }

downloads = video_menu(listings.videos)

downloads.each_with_index do |dl, index|
  tivo = TiVo::TiVo.new(tivo_addr, mak)
  dl_name = make_filename(dl)

  pbar = init_progress_bar(dl_name, dl.size)
  if decode
    IO.popen("java -jar #{tivo_libre_jar} -m #{mak} -o \"#{dl_name}\"", 'wb') do |td|
      perform_download(tivo, dl, td, pbar)
    end
  else
    File.open(dl_name, 'wb') { |file| perform_download(dl, file, pbar) }
  end
  sleep 30 if downloads.size > 1 && index < downloads.size - 1
end


# Local Variables:
# mode: ruby
# End:
